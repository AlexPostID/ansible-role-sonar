---
sudo: required

env:
  - distribution: centos
    version: 7
    init: /usr/lib/systemd/systemd
    run_opts: "--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro"
    site: test-latest.yml
  - distribution: centos
    version: 7
    init: /usr/lib/systemd/systemd
    run_opts: "--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro"
    site: test-lts.yml

  - distribution: ubuntu
    version: 14.04
    init: /sbin/init
    run_opts: ""
    site: test-latest.yml
  - distribution: ubuntu
    version: 14.04
    init: /sbin/init
    run_opts: ""
    site: test-lts.yml
    prefix: ''

services:
  - docker

before_install:
  # - sudo apt-get update
  # Pull container
  - 'sudo docker pull ${distribution}:${version}'
  # Customize container
  - 'sudo docker build --rm=true --file=tests/Dockerfile.${distribution}-${version} --tag=${distribution}-${version}:ansible tests'

script:
  - container_id=$(mktemp)
  # Run container in detached state
  - 'sudo docker run --detach --volume="${PWD}":/etc/ansible/roles/role_under_test:ro ${run_opts} ${distribution}-${version}:ansible "${init}" > "${container_id}"'

  # Install dependencies.
  - 'sudo docker exec "$(cat ${container_id})" ansible-galaxy install -r /etc/ansible/roles/role_under_test/tests/requirements.yml'

  # Ansible syntax check.
  - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm ansible-playbook /etc/ansible/roles/role_under_test/tests/$site --syntax-check'

  # Test role.
  - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm ansible-playbook /etc/ansible/roles/role_under_test/tests/$site'

  # Test role idempotence.
  - idempotence=$(mktemp)
  - sudo docker exec "$(cat ${container_id})" ansible-playbook /etc/ansible/roles/role_under_test/tests/$site | tee -a ${idempotence}
  - >
    tail ${idempotence}
    | grep -q 'changed=0.*failed=0'
    && (echo 'Idempotence test: pass' && exit 0)
    || (echo 'Idempotence test: fail' && exit 1)

  # SonarQube can take a while to start initially.
  - sleep 20

  # Make sure SonarQube is running.
  - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm curl http://localhost:9000/'

after_success:
  # Clean up.
  - 'sudo docker stop "$(cat ${container_id})"'

after_failure:
  # Check MySQL settings.
  - cat ~/.my.cnf
  - sudo cat /var/log/mysql.err
  - sudo cat /var/log/mysql.log

notifications:
  webhooks: https://galaxy.ansible.com/api/v1/notifications/
